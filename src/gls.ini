[gls]
; Define the build startegy. 
; 0 = RandomStart
; 1 = Greedy
; 2 = Bipartite 
BUILD_STRATEGY = 2

; Define the update startegy between epoches. 
; 0 = Scratch
; 1 = Merge
UPDATE_STRATEGY = 1

; Define the source color for the merges between epoches. 
; 0 = Random
; 1 = Minimal
; 2 = Maximal
; 3 = Median
SOURCE_TARGET = 1

; Define the destination color for the merges between epoches. 
; 0 = Random
; 1 = Minimal
; 2 = Maximal
; 3 = Median
DESTINATION_TARGET = 2

; Define the method for calculation of the chromatic number upper bound 
; 0 = Simple
; 1 = Theorem2
; 2 = Theorem3
UPPER_BOUND = 1

; Should the weights be rested to zeros between the epoches 
; 0 = No
; 1 = Yes
RESET_WEIGHTS = 1

; Set known lower bound for the chromatic number, so the GLS terminates after founding a correct solution with this bound.
LOWER_BOUND = 2

; Maximum count of itereations before a GLS epoche terminates
MAX_ITER = 0

; Maximum count of no improving itereations before a GLS epoche terminates
GLOBAL_MAX_NO_IMPROVE = 0

; Maximum count of not improving movements
MAX_NO_IMPROVE = 5

; 10 * the coefficient for combining guidance with conflicts
LAMBDA = 10

; If bigger than 0, dynammic lambda is used. This is lambda is set to the average score improvment before the first weights update multiplied by the value.
DYNAMIC_LAMBDA = 1

; Enable the aspiration moves
; 0 = No
; 1 = Yes
ASPIRATION = 1

; Enable the fast search
; 0 = No
; 1 = Yes
FAST_SEARCH = 0

; Timeout, before the GLS epoche execution terminates
TIMEOUT = 0

; Bitwise AND mask of the outputed messages
; Available levels:
; 1 = DEBUG_OUTPUT
; 2 = DEBUG_EPOCHE
; 4 = DEBUG_SOLUTION
; 8 = DEBUG_MINIMUM
; 16 = DEBUG_MOVES
DEBUG = 6
